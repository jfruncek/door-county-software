<project name="myTunes" default="run">

 <description><!-- TODO: enter project description here --></description>

 <property name="build.dir" location="build" />
 <property name="build.classes.dir" location="${build.dir}/classes" />
 <property name="src.dir" location="src" />

 <property name="framework.dir" location="c:\dev\jmatter-20081002\jmatter" />
 <property name="framework.classes.dir" location="${framework.dir}/build/classes" />
 <property name="lib.basedir" location="${framework.dir}/lib" />

 <property name="lib.dir" location="${lib.basedir}/runtime" />
 <property name="lib.tools.dir" location="${lib.basedir}/tools" />

 <property name="jws-dist.dir" location="jws-dist" />
 <property name="dist.dir" location="dist" />
 <property name="jar.file" location="${jws-dist.dir}/${ant.project.name}.jar" />
 <property name="model-jar.file" location="${dist.dir}/${ant.project.name}.jar" />
 <property name="war.file" location="${dist.dir}/${ant.project.name}.war" />

 <property name="test.dir" location="test" />
 <property name="test.src.dir" location="${test.dir}" />
 <property name="test.classes.dir" location="${build.classes.dir}" />
 <property name="test.lib.dir" location="${lib.basedir}/test" />
 <property name="test.reports.dir" location="${build.dir}/reports" />
	
 <property name="main.class" value="com.u2d.view.swing.EntryPoint" />
 
 <property name="hbprops" value="hibernate" />

 <path id="class.path">
   <fileset dir="${lib.dir}" includes="**/*.jar" />
   <pathelement location="${build.classes.dir}" />
   <pathelement location="${framework.classes.dir}" />
 </path>
 <path id="libtools.path">
   <fileset dir="${lib.tools.dir}" includes="*.jar" />
 </path>


 <target name="init">
   <tstamp />
   <mkdir dir="${build.classes.dir}" />
   <mkdir dir="${jws-dist.dir}" />
   <mkdir dir="${dist.dir}" />
   <available property="keystore.exists" file="tempKeystore"/>
 </target>

 <target name="clean">
   <delete dir="${build.dir}" />
   <delete dir="${jws-dist.dir}" />
   <delete dir="${build.web.dir}" />
   <delete dir="${dist.dir}" />
 </target>

 <path id="test.classpath">
   <path refid="class.path" />
   <fileset dir="${test.lib.dir}" includes="**/*.jar" />
   <pathelement location="${test.classes.dir}" />
 </path>
	
 <target name="keystore" unless="keystore.exists">
   <genkey alias="unknown" storepass="public" keystore="tempKeystore"
           dname="CN=Anonymous Signature, OU=unknown, o=unknown, c=unknown" />
 </target>
 
 <!-- some default for the pkg name.. -->
 <property name="reveng-pkgname" value="org.jmatter.app" />
   
 <target name="reveng-db" depends="init,compile-framework"
       description="Reverse Engineer an existing database schema that hibernate.properties resource file points to.  Pass in -Dreveng-pkgname to override default pkgname of org.jmatter.app">
    <java classname="com.u2d.persist.ReverseEngineer" classpathref="class.path" fork="true">
       <arg line="${reveng-pkgname} resources/${hbprops}.properties" />
    </java>
    <!-- todo:
       run schema-update target afterwards
       revise jmatter to not necessitate the next step of producing and running the sql update script
     -->
 </target>

 <taskdef name="make-persistclasses" classname="com.u2d.tools.AntPersistClassesMaker" classpathref="libtools.path" />

 <target name="compile" description="compile code" depends="init,compile-framework">
   <javac srcdir="${src.dir}"
          destdir="${build.classes.dir}"
          classpathref="class.path"
          listfiles="true"
          target="1.5"
          debug="on" deprecation="on" />
   <make-persistclasses template="${src.dir}/persistClasses.st"
        target="${build.classes.dir}/persistClasses.xml"
        classpathref="class.path">
     <fileset dir="${src.dir}" includes="**/*.java" />
   </make-persistclasses>

   <copy todir="${build.classes.dir}">
      <fileset dir="resources" includes="images/*.gif,images/*.png,images/*.jpg" />
      <fileset dir="resources" includes="model-metadata.properties" />
      <fileset dir="resources" includes="styles.css" />
      <fileset dir="resources/data" includes="*.xml,*.json" /> <!-- codes files -->
      <!-- <fileset dir="resources" includes="log4j.properties" /> -->
      <fileset dir="${src.dir}" includes="**/*.xml,**/*.json,**/*.jasper,**/*.jfrm" />
      <fileset dir="${src.dir}" includes="**/*.gif,**/*.png" />  <!-- any images referenced by jfree report xmls -->
   </copy>

   <native2ascii encoding="UTF-8" src="resources" dest="${build.classes.dir}" includes="locale-metadata*.properties" />

   <copy file="resources/${hbprops}.properties" tofile="${build.classes.dir}/hibernate.properties" />
 </target>
 
 <target name="compile-framework">
   <ant antfile="${framework.dir}/build.xml" inheritAll="false" target="compile" />
 </target>


 <target name="run" description="run app" depends="genhbm">
   <java classname="${main.class}" classpathref="class.path" 
         fork="true" maxmemory="192m">
    <!-- to test localization, uncomment this..
     <sysproperty key="user.language" value="fr" />
      -->
    <!-- to customize look and feel, uncomment this..
     <jvmarg line="-Dswing.defaultlaf=com.jgoodies.looks.plastic.PlasticXPLookAndFeel" />
      -->
   </java>
 </target>

 <taskdef name="script-maker" classname="com.u2d.tools.ShellScriptMaker" classpathref="libtools.path" />
 <target name="shellscript" description="produce runnable shell script" depends="genhbm">
    <script-maker classname="${main.class}"
                  classpathref="class.path"
                  maxmemory="192m" 
                  outputFile="run" />
 </target>

 <target name="jar" description="jar it" depends="clean,genhbm">
   <jar file="${jar.file}">
     <manifest>
       <attribute name="Created-By" value="jMatter" />
       <attribute name="Main-Class" value="${main.class}" />
     </manifest>
     <fileset dir="${build.classes.dir}" includes="**/*" />
     <fileset dir="${framework.classes.dir}" includes="**/*" />
   </jar>
 </target>

 <target name="jar-model" description="jar just the model" depends="clean,genhbm">
   <jar file="${model-jar.file}">
     <manifest>
       <attribute name="Created-By" value="jMatter" />
       <attribute name="Main-Class" value="${main.class}" />
     </manifest>
     <fileset dir="${build.classes.dir}" includes="**/*" />
   </jar>
 </target>

 <target name="schema-export" description="export schema to db">
    <antcall target="schema-x">
      <param name="arg" value="export" />
    </antcall>
 </target>
 <target name="schema-update" description="update db schema">
    <antcall target="schema-x">
      <param name="arg" value="update" />
    </antcall>
 </target>
 <target name="schema-x" depends="genhbm">
    <echo message="performing a schema ${arg}" />
    <java fork="true" classpathref="class.path" failonerror="true"
       classname="com.u2d.persist.HibernatePersistor">
      <arg value="${arg}" />
      <arg value="${build.dir}" />
    </java>
 </target>

   <target name="liquibase-diffchangelog" description="liquibase:  generate a diff changelog between db and hibernate mapping files">
      <antcall target="liquibase">
        <param name="arg" value="diffchangelog" />
      </antcall>
   </target>
   <target name="liquibase-update" description="liquibase:  execute migration">
      <antcall target="liquibase">
        <param name="arg" value="update" />
      </antcall>
   </target>
   <target name="liquibase-updateSQL" description="liquibase:  write migration sql to stdout">
      <antcall target="liquibase">
        <param name="arg" value="updateSQL" />
      </antcall>
   </target>
   <target name="liquibase-generate_changelog" description="liquibase:  generate change log from database definition">
      <antcall target="liquibase">
        <param name="arg" value="generate_changelog" />
      </antcall>
   </target>
   <target name="liquibase" depends="genhbm">
      <java classpathref="class.path" dir="${build.classes.dir}"
           fork="true" classname="com.u2d.persist.LiquibaseCommander">
         <arg value="${arg}" />
         <arg value="${basedir}" />
      </java>
   </target>



 <target name="seed-database" depends="schema-export"
         description="exports schema and initializes database (default classbar + users and roles)">
   <java fork="true" classpathref="class.path"
         classname="com.u2d.app.Application" />
 </target>


 <!-- TODO: (optional) to test .hbm.xml file generation for a single class file,
    specify name of class file in the following property 'class.file' -->
 <property name="class.file" value="com.u2d.nfjs.Talk" />
 <target name="hbmxml" depends="compile">
   <java classname="com.u2d.persist.HBMMaker" 
         classpathref="class.path" 
         fork="true" 
         dir="${build.classes.dir}">
     <arg value="${class.file}" />
   </java>
 </target>
 
 <target name="genhbm" depends="compile" description="generate hbm.xml files">
   <java classpathref="class.path" dir="${build.classes.dir}"
         fork="true" classname="com.u2d.persist.HBMGenerator" />
 </target>


 <target name="hbm-practice" description="run hbm practice tool" depends="genhbm">
   <java classname="com.u2d.tools.HBMPracticeTool" classpathref="class.path"
         fork="true" maxmemory="128m" />
 </target>

 <taskdef name="make-jnlp" classname="com.u2d.tools.JnlpMaker" classpathref="libtools.path" />

 <target name="jws-dist" description="create java webstart distribution" 
         depends="jar, keystore">
   <copy todir="${jws-dist.dir}">
     <fileset dir="resources/jws/static" includes="*" />
   </copy>

   <antcall target="copylibs">
      <param name="target.dir" location="${jws-dist.dir}/lib" />
      <param name="vmname" value="swingvm" />
   </antcall>

   <make-jnlp template="resources/jws/dynamic/project-jnlp.st" 
              props="resources/jws/dynamic/project.properties"
              jarbasepath="${jws-dist.dir}"
              excludejars="swingvm.jar"
              tofile="${jws-dist.dir}/project.jnlp" />

   <signjar alias="unknown" storepass="public" keystore="tempKeystore">
     <fileset dir="${jws-dist.dir}" includes="**/*.jar" />
   </signjar>

   <war destfile="${war.file}" webxml="resources/jws/web.xml"
   	    basedir="${jws-dist.dir}" />
 </target>
   
 <target name="find-drvname">
    <taskdef name="jdbcdriversetter" classname="com.u2d.tools.DriverPropertySetter"
       classpathref="libtools.path" />
    <jdbcdriversetter basepath="${lib.dir}/jdbc"/>
    <echo message="jdbcdrivername is ${jdbcdrivername}" />
 </target>
   
 <target name="copylibs" depends="find-drvname">
    <property name="jdbcdrivername" value="*.jar" /> <!-- fallback -->
    <mkdir dir="${target.dir}" />
    <copy todir="${target.dir}" flatten="true">
       <fileset dir="${lib.dir}"
                includes="*.jar,hb/*.jar,jfree/*.jar,spring/*.jar,jasper/*.jar,${vmname}.jar,${vmname}/*.jar" />
       <fileset dir="${lib.dir}"
                includes="jdbc/${jdbcdrivername}" />
    </copy>
 </target>

 <target name="macappbundle" description="create macosx app bundle" depends="jar,find-drvname">
   <taskdef name="jarbundler" classname="net.sourceforge.jarbundler.JarBundler"
            classpath="${lib.tools.dir}/jarbundler-1.9.jar" />
   <property name="jdbcdrivername" value="*.jar" /> <!-- fallback -->
   <jarbundler dir="${dist.dir}" name="${ant.project.name}" mainclass="${main.class}"
               jvmversion="1.5+">
      <javaproperty name="swing.defaultlaf" value="javax.swing.plaf.metal.MetalLookAndFeel" />
      <jarfileset dir="${lib.dir}"
                  includes="*.jar,hb/*.jar,jfree/*.jar,spring/*.jar,swingvm.jar,swingvm/*.jar" />
      <jarfileset dir="${lib.dir}"
                  includes="jdbc/${jdbcdrivername}" />
      <jarfileset dir="${jws-dist.dir}" includes="${ant.project.name}.jar" />
   </jarbundler>
 </target>

 <!-- targets pertaining to junit testing -->

 <target name="test-init">
   <mkdir dir="${test.classes.dir}"/>
   <mkdir dir="${test.reports.dir}"/>
 </target>

 <target name="compile-tests" depends="test-init,genhbm" description="compile tests">
   <javac debug="on" deprecation="on"
          classpathref="test.classpath" destdir="${test.classes.dir}" srcdir="${test.src.dir}" />
 </target>

 <target name="run-tests" depends="compile-tests" description="run tests" >
    <junit fork="true" haltonfailure="false" printsummary="true">
       <classpath refid="test.classpath" />
       <formatter type="xml" />
       <batchtest todir="${test.reports.dir}">
          <fileset dir="${test.classes.dir}" includes="**/*Suite.class" />
       </batchtest>
    </junit>
 </target>

 <target name="run-a-test" depends="compile-tests" description="run a test">
    <junit fork="true" haltonfailure="true" printsummary="true">
       <classpath refid="test.classpath" />
       <formatter type="brief" usefile="false" /> <!-- alternative type="xml" for producing reports -->
       <batchtest todir="${test.reports.dir}">
          <fileset dir="${test.classes.dir}" includes="**/${test.name}.class" />
       </batchtest>
    </junit>
 </target>

 <target name="run-test" description="run a test class" depends="compile-tests">
   <java classname="${main.class}" classpathref="test.classpath" fork="true" />
 </target>

	
 <target name="test-report" depends="run-tests" description="produce junit reports">
   <junitreport todir="${test.reports.dir}">
     <fileset dir="${test.reports.dir}" includes="TEST-*.xml" />
     <report todir="${test.reports.dir}/html" />
   </junitreport>
 </target>


 <!-- not yet fully working:  for deploying as a web application using WingS -->
 <property name="build.web.dir" location="${build.dir}/web" />
 <target name="init-web">
    <mkdir dir="${build.web.dir}" />
    <mkdir dir="${build.web.dir}/WEB-INF" />
    <mkdir dir="${build.web.dir}/WEB-INF/classes" />
 </target>

 <target name="wings-app" depends="genhbm, init-web" description="build wings-based web application">
   <antcall target="web-app">
     <param name="vmname" value="wings" />
   </antcall>
 </target>

 <target name="echo2-app" depends="genhbm, init-web" description="build echo2-based web application">
    <antcall target="web-app">
      <param name="vmname" value="echo2" />
    </antcall>
 </target>

 <target name="web-app" depends="genhbm, init-web">
    <copy todir="${build.web.dir}/WEB-INF">
      <fileset dir="resources/${vmname}/WEB-INF" includes="web*.xml" />
      <fileset dir="${build.classes.dir}" includes="persistClasses.xml" />
    </copy>

    <copy todir="${build.web.dir}/WEB-INF/classes">
      <fileset dir="resources/${vmname}/WEB-INF/classes" includes="*.properties" />
    </copy>

    <copy todir="${build.web.dir}/WEB-INF/classes">
       <fileset dir="${build.classes.dir}" includes="**/*" excludes="*.xml" />
       <fileset dir="${framework.classes.dir}" includes="**/*" />
    </copy>

    <antcall target="copylibs">
       <param name="target.dir" location="${build.web.dir}/WEB-INF/lib" />
       <param name="vmname" value="${vmname}vm" />
    </antcall>

    <copy todir="${build.web.dir}">
      <fileset dir="resources/${vmname}" excludes="WEB-INF" />
    </copy>
 </target>

</project>
