projectName = 'myTunes'

target ( 'default' : 'default target: run' ) { run() }

buildDir = 'build'
buildClassesDir = "${buildDir}/classes"
srcDir = 'src'

boolean isStandalone() { return new File('lib/runtime/jmatter.jar').exists() }
standalone = isStandalone()

libBaseDir = 'lib'
if (!standalone)
{
   frameworkDir = 'c:\dev\jmatter-20081002\jmatter'
   frameworkClassesDir = "${frameworkDir}/build/classes"
   libBaseDir = "${frameworkDir}/lib"
}

libDir = "${libBaseDir}/runtime"
libToolsDir = "${libBaseDir}/tools"

jwsDistDir = 'jws-dist'
distDir = 'dist'
jarFile = "${jwsDistDir}/${projectName.toLowerCase()}.jar"
warFile = "${distDir}/${projectName.toLowerCase()}.war"

testDir = 'test'
testSrcDir = testDir
testClassesDir = buildClassesDir
testLibDir = "${libBaseDir}/test"
testReportsDir = "${buildDir}/reports"

mainClass = 'com.u2d.view.swing.EntryPoint'

Ant.path ( id : 'class.path' )
{
  fileset ( dir : libDir, includes : '**/*.jar' )
  pathelement ( location : buildClassesDir )
  if (!standalone)
  {
    pathelement ( location : frameworkClassesDir )
  }
}

target ( init : '')
{
  Ant.tstamp()
  Ant.mkdir ( dir : buildClassesDir )
  Ant.mkdir ( dir : jwsDistDir )
  Ant.mkdir ( dir : distDir )
}

target ( clean : '')
{
  Ant.delete ( dir : buildDir )
  Ant.delete ( dir : jwsDistDir )
  Ant.delete ( dir : buildWebDir )
  Ant.delete ( dir : distDir )
}

Ant.path ( id : 'test.classpath' )
{
  path (refid : 'class.path')
  fileset ( dir : testLibDir, includes : '**/*.jar' )
  pathelement ( location : testClassesDir )
}

keystoreExists = new File('tempKeystore').exists()

target ( keystore : '' )
{
  if (keystoreExists) return;
  Ant.genkey ( alias : 'unknown' , storepass : 'public', keystore: 'tempKeystore',
               dname : 'CN=Anonymous Signature, OU=unknown, o=unknown, c=unknown' )
}

target ( compile : 'compile code' )
{
  depends ( init, compileFramework )
  Ant.javac ( srcdir : srcDir, destdir : buildClassesDir,
              classpathref : 'class.path',
              listfiles : 'true',
              debug : 'on', deprecation: 'on' )


  makePersistClassesFile()

  Ant.copy ( todir : buildClassesDir )
  {
    fileset ( dir : 'resources', includes : 'images/*.gif,images/*.png,images/*.jpg')
    fileset ( dir: 'resources', includes : 'model-metadata.properties' )
    fileset ( dir: 'resources', includes : 'locale-metadata*.properties' )
    fileset ( dir: 'resources', includes : 'styles.css' )
    fileset ( dir: 'resources/data', includes : '*.xml,*.json' ) // codes files
    // fileset ( dir: 'resources' includes: 'log4j.properties' )
    fileset ( dir: srcDir , includes: '**/*.xml,**/*.jfrm' )  // jfree report xmls
    fileset ( dir: srcDir,  includes: '**/*.gif,**/*.png' )  // any images referenced by jfree report xmls
  }
  Ant.copy ( file : 'resources/hibernate.properties' , todir : buildClassesDir )
}

void makePersistClassesFile()
{
  def fs = Ant.fileset(dir: srcDir, includes: '**/*.java')
  def ds = fs.getDirectoryScanner(Ant.project)
  def classes = ds.getIncludedFiles().collect { clsfile ->
    def clsname = clsfile.replace('/', '.')
    clsname = clsname.substring(0, clsfile.length()-5)
    return clsname
  }
  
  def path = Ant.path (refid : 'class.path')
  def cl = Ant.project.createClassLoader(path)

  def pclass = cl.loadClass("com.u2d.persist.Persist")
  
  def persistclasses = classes.grep { clsname ->
    def cls = cl.loadClass(clsname)
    return cls.isAnnotationPresent(pclass);
  }

  def binding = [ classnames : persistclasses ]
  def engine = new groovy.text.SimpleTemplateEngine()
  def templateFile = srcDir + '/persistClasses.gt'
  def template = engine.createTemplate(new File(templateFile))
  def writer = new FileWriter("${buildClassesDir}/persistClasses.xml");
  template.make(binding).writeTo(writer);
}

target ( compileFramework : '')
{
  if (!standalone)
  {
    // TODO: call gant file instead of ant build..
    Ant.ant( antfile : "${frameworkDir}/build.xml",  inheritAll : 'false', target: 'bind')
  }
}

target ( run : 'run app' )
{
  depends ( genhbm )
  Ant.java ( classname : mainClass, classpathref : 'class.path', fork : 'true', maxmemory : '192m' )
  {
    // to test localization, uncomment this..
    // sysproperty ( key : 'user.language', value: 'fr')
  }
}

class ShellScriptMaker extends org.apache.tools.ant.taskdefs.Java
{
  def outputFile = 'run';  // default
  public void setOutputFile(String filename) { this.outputFile = filename; }
  public void execute()
  {
    def targetFile = outputFile;
    if (! ( targetFile.endsWith(".sh") || targetFile.endsWith(".bat") ) )
    {
      def os = System.getProperty("os.name").toLowerCase();
      targetFile += (os =~ /windows/ || os =~ /nt/ ) ? ".bat" : ".sh"
    }
    new File(targetFile).withWriter { w ->
      w.write getCommandLine().toString()
    }

    new AntBuilder().chmod(file: targetFile, perm: 755)
  }
}
Ant.project.addTaskDefinition('scriptMaker', ShellScriptMaker)

target ( shellscript : 'produce runnable shell script')
{
  depends (genhbm)
  Ant.scriptMaker ( classname : mainClass, classpathref : 'class.path' , maxmemory : '192m' )
}

target ( jar : 'jar it' )
{
  depends ( clean, genhbm )
  Ant.jar ( file : jarFile )
  {
    manifest
    {
      attribute (name : 'Created-By' , value : 'jmatter' )
      attribute (name : 'Main-Class' , value : mainClass )
    }
    fileset (dir : buildClassesDir, includes : '**/*' )
    if (!standalone)
    {
      fileset (dir : frameworkClassesDir, includes : '**/*' )
    }
  }
}

target ( schemaExport : 'export schema to db') { schemaX('export') }
target ( schemaUpdate: 'update db schema') { schemaX('update') }

target ( schemaX : '') { cmd ->
  depends(genhbm)
  Ant.echo(message : "performing schema ${cmd}" )
  Ant.java (fork:'true', classpathref:'class.path', classname:'com.u2d.persist.HibernatePersistor')
  {
    arg (value: cmd)
    arg (value: buildDir)
  }
}

target ( seedDatabase : 'exports schema and initializes database (default classbar + users and roles)' )
{
  depends(schemaExport)
  Ant.java (fork:'true', classpathref:'class.path', classname:'com.u2d.app.Application')
}


/* TODO: (optional)to test .hbm.xml file generation for a single class file
    specify name of class file in the following property 'classFile'
 */
def classFile = 'com.u2d.nfjs.Talk'

target (hbmxml: '')
{
  depends(compile)
  Ant.java (classname: 'com.u2d.persist.HBMMaker', classpathref: 'class.path', fork:'true',
            dir : buildClassesDir)
  {
    arg (value: classFile)
  }
}

target (genhbm : 'generate hbm.xml files')
{
  depends (bind)
  Ant.java (classpathref: 'class.path',
            dir: buildClassesDir,
            fork: 'true', 
            classname : 'com.u2d.persist.HBMGenerator')
}

Ant.taskdef ( name: 'bind' , classname : 'org.jibx.binding.ant.CompileTask')
{
  classpath
  {
    pathelement ( location : "${libToolsDir}/bcel.jar" )
    pathelement ( location : "${libToolsDir}/jibx-bind.jar" )
    pathelement ( location : "${libDir}/jibx-run.jar" )
    pathelement ( location : "${libDir}/xpp3.jar" )
  }
}

target ( bind : 'run JiBX binding compiler')
{
  depends(compile)
  /* turn this off;  if there's nothing to bind jibx will instead throw an error;
     when need to write jibx binding files for new types, uncomment this..
     Ant.bind (binding : 'resources/binding.xml')
     {
       classpathset (dir: buildClassesDir)
       classpathset (dir: "${libDir}/jmatter.jar")
       classpathset (dir: "${libDir}/hibernate3.jar")
       classpathset (dir: "${libDir}/jibx-run.jar")
     }
     */
}

target (hbmPractice : 'run hbm practice tools')
{
  depends (genhbm)
  Ant.java ( classname : 'com.u2d.tools.HBMPracticeTool', classpathref: 'class.path', 
     fork : 'true', maxmemory : '128m' )
}

target (jwsDist : 'create java webstart distribution')
{
  depends ( jar, keystore )
  Ant.copy ( todir : jwsDistDir )
  {
    fileset ( dir : 'resources/jws/static', includes : '*' )
  }
  copylibs("${jwsDistDir}/lib", 'swingvm')

  makeJnlpFile()

  Ant.signjar ( alias : 'unknown', storepass : 'public' , keystore : 'tempKeystore' )
  {
    fileset ( dir: jwsDistDir, includes : '**/*.jar' )
  }
    
  Ant.war ( destfile : warFile, webxml : 'resources/jws/web.xml', basedir : jwsDistDir)
}

void makeJnlpFile()
{
  def fs = Ant.fileset ( dir : jwsDistDir, includes : '**/*.jar' )
  def ds = fs.getDirectoryScanner(Ant.project)
  def jars = new HashSet(ds.getIncludedFiles().toList())
  jars.remove('lib/swingvm.jar')
  def binding = ['jars' : jars]
  
  def props = new Properties()
  props.load(new FileInputStream('resources/jws/dynamic/project.properties'))
  binding.putAll(props)
  
  def engine = new groovy.text.SimpleTemplateEngine()
  def templateFile = 'resources/jws/dynamic/project-jnlp.gt'
  def template = engine.createTemplate(new File(templateFile))
  def writer = new FileWriter("${jwsDistDir}/project.jnlp");
  
  template.make(binding).writeTo(writer);
}

target ( findDrvname: '')
{
  Ant.taskdef (name : 'jdbcdriversetter' , classname : 'com.u2d.tools.DriverPropertySetter', 
    classpathref : 'class.path' )
  Ant.jdbcdriversetter ( basepath : "${libDir}/jdbc" )
}

target (copylibs : '') { targetDir, vmname ->
  depends (findDrvname)
  Ant.property( name : 'jdbcdrivername', value : '*.jar')  // fallback
  Ant.mkdir (dir : targetDir )
  Ant.copy (todir: targetDir, flatten : 'true')
  {
    fileset (dir : libDir, includes: "*.jar,hb/*.jar,jfree/*.jar,spring/*.jar,${vmname}.jar,${vmname}/*.jar")
    fileset (dir : libDir, includes: "jdbc/${Ant.project.properties.jdbcdrivername}" )
  }
}


//  not yet fully working:  for deploying as a web application using WingS
buildWebDir = "${buildDir}/web"

target ( initWeb : '') { new File("${buildWebDir}/WEB-INF/classes").mkdirs() }

target ( wingsApp : 'build wings-based web application') { webApp('wings') }
target (echo2App : 'build echo2-based web application') { webApp('echo2') }

target (webApp : '') { vmname ->
  depends (genhbm, initWeb)
  Ant.copy (todir: "${buildWebDir}/WEB-INF")
  {
    fileset ( dir: "resources/${vmname}/WEB-INF", includes: "web*.xml" )
    fileset ( dir: buildClassesDir , includes: 'persistClasses.xml' )
  }
  Ant.copy (todir : "${buildWebDir}/WEB-INF/classes")
  {
    fileset ( dir: "resources/${vmname}/WEB-INF/classes", includes: "*.properties" )
  }
  Ant.copy ( todir: "${buildWebDir}/WEB-INF/classes")
  {
    fileset ( dir: buildClassesDir, includes: '**/*', excludes: '*.xml' )
    if (!standalone)
    {
      fileset ( dir: frameworkClassesDir, includes: '**/*' )
    }
  }
  copylibs("${buildWebDir}/WEB-INF/lib", "${vmname}vm")
  Ant.copy ( todir : buildWebDir )
  {
    fileset ( dir: "resources/${vmname}", excludes : "WEB-INF" )
  }
}
