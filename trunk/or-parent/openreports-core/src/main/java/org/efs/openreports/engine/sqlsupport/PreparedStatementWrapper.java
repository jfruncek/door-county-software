package org.efs.openreports.engine.sqlsupport;

import java.io.InputStream;
import java.io.Reader;
import java.math.BigDecimal;
import java.net.URL;
import java.sql.Array;
import java.sql.Blob;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.Date;
import java.sql.NClob;
import java.sql.ParameterMetaData;
import java.sql.PreparedStatement;
import java.sql.Ref;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.RowId;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.SQLXML;
import java.sql.Time;
import java.sql.Timestamp;
import java.util.Calendar;

import org.apache.log4j.Logger;

public class PreparedStatementWrapper implements PreparedStatement {
    protected static final Logger LOG = Logger.getLogger( PreparedStatementWrapper.class );
    private PreparedStatement delegate;
    private ConnectionWrapper connectionWrapper;
    private static int preparedStatementCount = 0;
    private int preparedStatementNumber;
    private boolean closeWasCalled = false;
    private String sql;

    public boolean closeWasCalled() {
        return closeWasCalled;
    }

    protected void log( String message ) {
        LOG.info( "PreparedStatementWrapper: " + connectionWrapper.getConnectionNumber() + "."
                + getPreparedStatementNumber() + ": " + message );
    }

    protected void logStart( String message ) {
        log( "start: " + message );
    }

    protected void logEnd( String message ) {
        log( "  end: " + message );
    }

    protected void logStart( String message, String sql ) {
        log( "start: " + message, sql );
    }

    protected void logEnd( String message, String sql ) {
        log( "  end: " + message, sql );
    }

    protected void log( String message, String sql ) {
        LOG.info( "PreparedStatementWrapper: " + connectionWrapper.getConnectionNumber() + "."
        // + getPreparedStatementNumber() + ": " + message + "SQL: \n" + sql );
                + getPreparedStatementNumber() + ": " + message );
    }

    private void logException( String message, Exception se ) {
        LOG.error( "PreparedStatementWrapper: " + connectionWrapper.getConnectionNumber() + "."
                + getPreparedStatementNumber() + ": " + message, se );
    }

    private void logException( String message, String sql, Exception se ) {
        LOG.error( "PreparedStatementWrapper: " + connectionWrapper.getConnectionNumber() + "."
        // + getPreparedStatementNumber() + ": " + message + "SQL: \n" + sql, se );
                + getPreparedStatementNumber() + ": " + message, se );
    }

    private int getPreparedStatementNumber() {
        return preparedStatementNumber;
    }

    public PreparedStatementWrapper( ConnectionWrapper connectionWrapper, String sql, PreparedStatement delegate ) {
        this.delegate = delegate;
        this.connectionWrapper = connectionWrapper;
        this.preparedStatementNumber = ++preparedStatementCount;
        this.sql = sql;
        connectionWrapper.add( this );
        log( "Constructor" );
    }

    @Override
    public void addBatch() throws SQLException {
        log( "addBatch" );
        delegate.addBatch();
    }

    @Override
    public void addBatch( String sql ) throws SQLException {
        log( "addBatch(String sql): " + sql );
        delegate.addBatch( sql );
    }

    @Override
    public void cancel() throws SQLException {
        delegate.cancel();
    }

    @Override
    public void clearBatch() throws SQLException {
        delegate.clearBatch();
    }

    @Override
    public void clearParameters() throws SQLException {
        delegate.clearParameters();
    }

    @Override
    public void clearWarnings() throws SQLException {
        delegate.clearWarnings();
    }

    @Override
    public void close() throws SQLException {
        log( "close(): closing ... " );
        delegate.close();
        closeWasCalled = true;
        log( "close(): closed" );
    }

    @Override
    public boolean execute() throws SQLException {
        String msg = "execute()";
        logStart( msg, sql );
        try {
            return delegate.execute();
        } catch( SQLException se ) {
            logException( msg, sql, se );
            throw se;
        } finally {
            logEnd( msg, sql );
        }
    }

    @Override
    public boolean execute( String sql, int autoGeneratedKeys ) throws SQLException {
        String message = "execute(String sql, int autoGeneratedKeys)";
        logStart( message, sql );
        try {
            return delegate.execute( sql, autoGeneratedKeys );
        } catch( SQLException se ) {
            logException( message, sql, se );
            throw se;
        } finally {
            logEnd( message, sql );
        }
    }

    @Override
    public boolean execute( String sql, int[] columnIndexes ) throws SQLException {
        String message = "execute(String sql, int[] columnIndexes )";
        logStart( message, sql );
        try {
            return delegate.execute( sql, columnIndexes );
        } catch( SQLException se ) {
            logException( message, sql, se );
            throw se;
        } finally {
            logEnd( message, sql );
        }
    }

    @Override
    public boolean execute( String sql, String[] columnNames ) throws SQLException {
        String message = "execute(String sql, String[] columnNames  )";
        log( message, sql );
        try {
            return delegate.execute( sql, columnNames );
        } catch( SQLException se ) {
            logException( message, sql, se );
            throw se;
        } finally {
            logEnd( message, sql );
        }
    }

    @Override
    public boolean execute( String sql ) throws SQLException {
        String message = "execute(String sql)";
        log( message, sql );
        try {
            return delegate.execute( sql );
        } catch( SQLException se ) {
            logException( message, sql, se );
            throw se;
        } finally {
            logEnd( message, sql );
        }
    }

    @Override
    public int[] executeBatch() throws SQLException {
        log( "executeBatch()" );
        try {
            return delegate.executeBatch();
        } catch( SQLException se ) {
            logException( "executeBatch()", se );
            throw se;
        }
    }

    @Override
    public ResultSet executeQuery() throws SQLException {
        log( "executeQuery()", sql );
        try {
            return delegate.executeQuery();
        } catch( SQLException se ) {
            logException( "executeQuery()", sql, se );
            throw se;
        }
    }

    @Override
    public ResultSet executeQuery( String sql ) throws SQLException {
        log( "executeQuery(String sql)", sql );
        try {
            return delegate.executeQuery( sql );
        } catch( SQLException se ) {
            logException( "executeQuery(String sql)", sql, se );
            throw se;
        }
    }

    @Override
    public int executeUpdate() throws SQLException {
        log( "executeUpdate()", sql );
        try {
            return delegate.executeUpdate();
        } catch( SQLException se ) {
            logException( "executeUpdate()", sql, se );
            throw se;
        }
    }

    @Override
    public int executeUpdate( String sql, int autoGeneratedKeys ) throws SQLException {
        log( "executeUpdate(String sql, int autoGeneratedKeys )", sql );
        try {
            return delegate.executeUpdate( sql, autoGeneratedKeys );
        } catch( SQLException se ) {
            logException( "executeUpdate(String sql, int autoGeneratedKeys)", sql, se );
            throw se;
        }
    }

    @Override
    public int executeUpdate( String sql, int[] columnIndexes ) throws SQLException {
        log( "executeUpdate(String sql, int[] columnIndexes )", sql );
        try {
            return delegate.executeUpdate( sql, columnIndexes );
        } catch( SQLException se ) {
            logException( "executeUpdate(String sql, int[] columnIndexes)", sql, se );
            throw se;
        }
    }

    @Override
    public int executeUpdate( String sql, String[] columnNames ) throws SQLException {
        log( "executeUpdate(String sql, String[] columnNames )", sql );
        try {
            return delegate.executeUpdate( sql, columnNames );
        } catch( SQLException se ) {
            logException( "executeUpdate(String sql, String[] columnNames )", sql, se );
            throw se;
        }
    }

    @Override
    public int executeUpdate( String sql ) throws SQLException {
        log( "executeUpdate(String sql)", sql );
        try {
            return delegate.executeUpdate( sql );
        } catch( SQLException se ) {
            logException( "executeUpdate(String sql)", sql, se );
            throw se;
        }
    }

    @Override
    public Connection getConnection() throws SQLException {
        return delegate.getConnection();
    }

    @Override
    public int getFetchDirection() throws SQLException {
        return delegate.getFetchDirection();
    }

    @Override
    public int getFetchSize() throws SQLException {
        return delegate.getFetchSize();
    }

    @Override
    public ResultSet getGeneratedKeys() throws SQLException {
        return delegate.getGeneratedKeys();
    }

    @Override
    public int getMaxFieldSize() throws SQLException {
        return delegate.getMaxFieldSize();
    }

    @Override
    public int getMaxRows() throws SQLException {
        return delegate.getMaxRows();
    }

    @Override
    public ResultSetMetaData getMetaData() throws SQLException {
        return delegate.getMetaData();
    }

    @Override
    public boolean getMoreResults() throws SQLException {
        return delegate.getMoreResults();
    }

    @Override
    public boolean getMoreResults( int current ) throws SQLException {
        return delegate.getMoreResults( current );
    }

    @Override
    public ParameterMetaData getParameterMetaData() throws SQLException {
        return delegate.getParameterMetaData();
    }

    @Override
    public int getQueryTimeout() throws SQLException {
        return delegate.getQueryTimeout();
    }

    @Override
    public ResultSet getResultSet() throws SQLException {
        return delegate.getResultSet();
    }

    @Override
    public int getResultSetConcurrency() throws SQLException {
        return delegate.getResultSetConcurrency();
    }

    @Override
    public int getResultSetHoldability() throws SQLException {
        return delegate.getResultSetHoldability();
    }

    @Override
    public int getResultSetType() throws SQLException {
        return delegate.getResultSetType();
    }

    @Override
    public int getUpdateCount() throws SQLException {
        return delegate.getUpdateCount();
    }

    @Override
    public SQLWarning getWarnings() throws SQLException {
        return delegate.getWarnings();
    }

    @Override
    public boolean isClosed() throws SQLException {
        return delegate.isClosed();
    }

    @Override
    public boolean isPoolable() throws SQLException {
        return delegate.isPoolable();
    }

    @Override
    public boolean isWrapperFor( Class<?> iface ) throws SQLException {
        return delegate.isWrapperFor( iface );
    }

    @Override
    public void setArray( int parameterIndex, Array x ) throws SQLException {
        delegate.setArray( parameterIndex, x );
    }

    @Override
    public void setAsciiStream( int parameterIndex, InputStream x, int length ) throws SQLException {
        delegate.setAsciiStream( parameterIndex, x, length );
    }

    @Override
    public void setAsciiStream( int parameterIndex, InputStream x, long length ) throws SQLException {
        delegate.setAsciiStream( parameterIndex, x, length );
    }

    @Override
    public void setAsciiStream( int parameterIndex, InputStream x ) throws SQLException {
        delegate.setAsciiStream( parameterIndex, x );
    }

    @Override
    public void setBigDecimal( int parameterIndex, BigDecimal x ) throws SQLException {
        delegate.setBigDecimal( parameterIndex, x );
    }

    @Override
    public void setBinaryStream( int parameterIndex, InputStream x, int length ) throws SQLException {
        delegate.setBinaryStream( parameterIndex, x, length );
    }

    @Override
    public void setBinaryStream( int parameterIndex, InputStream x, long length ) throws SQLException {
        delegate.setBinaryStream( parameterIndex, x, length );
    }

    @Override
    public void setBinaryStream( int parameterIndex, InputStream x ) throws SQLException {
        delegate.setBinaryStream( parameterIndex, x );
    }

    @Override
    public void setBlob( int parameterIndex, Blob x ) throws SQLException {
        delegate.setBlob( parameterIndex, x );
    }

    @Override
    public void setBlob( int parameterIndex, InputStream inputStream, long length ) throws SQLException {
        delegate.setBlob( parameterIndex, inputStream, length );
    }

    @Override
    public void setBlob( int parameterIndex, InputStream inputStream ) throws SQLException {
        delegate.setBlob( parameterIndex, inputStream );
    }

    @Override
    public void setBoolean( int parameterIndex, boolean x ) throws SQLException {
        delegate.setBoolean( parameterIndex, x );
    }

    @Override
    public void setByte( int parameterIndex, byte x ) throws SQLException {
        delegate.setByte( parameterIndex, x );
    }

    @Override
    public void setBytes( int parameterIndex, byte[] x ) throws SQLException {
        delegate.setBytes( parameterIndex, x );
    }

    @Override
    public void setCharacterStream( int parameterIndex, Reader reader, int length ) throws SQLException {
        delegate.setCharacterStream( parameterIndex, reader, length );
    }

    @Override
    public void setCharacterStream( int parameterIndex, Reader reader, long length ) throws SQLException {
        delegate.setCharacterStream( parameterIndex, reader, length );
    }

    @Override
    public void setCharacterStream( int parameterIndex, Reader reader ) throws SQLException {
        delegate.setCharacterStream( parameterIndex, reader );
    }

    @Override
    public void setClob( int parameterIndex, Clob x ) throws SQLException {
        delegate.setClob( parameterIndex, x );
    }

    @Override
    public void setClob( int parameterIndex, Reader reader, long length ) throws SQLException {
        delegate.setClob( parameterIndex, reader, length );
    }

    @Override
    public void setClob( int parameterIndex, Reader reader ) throws SQLException {
        delegate.setClob( parameterIndex, reader );
    }

    @Override
    public void setCursorName( String name ) throws SQLException {
        delegate.setCursorName( name );
    }

    @Override
    public void setDate( int parameterIndex, Date x, Calendar cal ) throws SQLException {
        delegate.setDate( parameterIndex, x, cal );
    }

    @Override
    public void setDate( int parameterIndex, Date x ) throws SQLException {
        delegate.setDate( parameterIndex, x );
    }

    @Override
    public void setDouble( int parameterIndex, double x ) throws SQLException {
        delegate.setDouble( parameterIndex, x );
    }

    @Override
    public void setEscapeProcessing( boolean enable ) throws SQLException {
        delegate.setEscapeProcessing( enable );
    }

    @Override
    public void setFetchDirection( int direction ) throws SQLException {
        delegate.setFetchDirection( direction );
    }

    @Override
    public void setFetchSize( int rows ) throws SQLException {
        delegate.setFetchSize( rows );
    }

    @Override
    public void setFloat( int parameterIndex, float x ) throws SQLException {
        delegate.setFloat( parameterIndex, x );
    }

    @Override
    public void setInt( int parameterIndex, int x ) throws SQLException {
        delegate.setInt( parameterIndex, x );
    }

    @Override
    public void setLong( int parameterIndex, long x ) throws SQLException {
        delegate.setLong( parameterIndex, x );
    }

    @Override
    public void setMaxFieldSize( int max ) throws SQLException {
        delegate.setMaxFieldSize( max );
    }

    @Override
    public void setMaxRows( int max ) throws SQLException {
        delegate.setMaxRows( max );
    }

    @Override
    public void setNCharacterStream( int parameterIndex, Reader value, long length ) throws SQLException {
        delegate.setNCharacterStream( parameterIndex, value, length );
    }

    @Override
    public void setNCharacterStream( int parameterIndex, Reader value ) throws SQLException {
        delegate.setNCharacterStream( parameterIndex, value );
    }

    @Override
    public void setNClob( int parameterIndex, NClob value ) throws SQLException {
        delegate.setNClob( parameterIndex, value );
    }

    @Override
    public void setNClob( int parameterIndex, Reader reader, long length ) throws SQLException {
        delegate.setNClob( parameterIndex, reader, length );
    }

    @Override
    public void setNClob( int parameterIndex, Reader reader ) throws SQLException {
        delegate.setNClob( parameterIndex, reader );
    }

    @Override
    public void setNString( int parameterIndex, String value ) throws SQLException {
        delegate.setNString( parameterIndex, value );
    }

    @Override
    public void setNull( int parameterIndex, int sqlType, String typeName ) throws SQLException {
        delegate.setNull( parameterIndex, sqlType, typeName );
    }

    @Override
    public void setNull( int parameterIndex, int sqlType ) throws SQLException {
        delegate.setNull( parameterIndex, sqlType );
    }

    @Override
    public void setObject( int parameterIndex, Object x, int targetSqlType, int scaleOrLength ) throws SQLException {
        delegate.setObject( parameterIndex, x, targetSqlType, scaleOrLength );
    }

    @Override
    public void setObject( int parameterIndex, Object x, int targetSqlType ) throws SQLException {
        delegate.setObject( parameterIndex, x, targetSqlType );
    }

    @Override
    public void setObject( int parameterIndex, Object x ) throws SQLException {
        delegate.setObject( parameterIndex, x );
    }

    @Override
    public void setPoolable( boolean poolable ) throws SQLException {
        delegate.setPoolable( poolable );
    }

    @Override
    public void setQueryTimeout( int seconds ) throws SQLException {
        delegate.setQueryTimeout( seconds );
    }

    @Override
    public void setRef( int parameterIndex, Ref x ) throws SQLException {
        delegate.setRef( parameterIndex, x );
    }

    @Override
    public void setRowId( int parameterIndex, RowId x ) throws SQLException {
        delegate.setRowId( parameterIndex, x );
    }

    @Override
    public void setShort( int parameterIndex, short x ) throws SQLException {
        delegate.setShort( parameterIndex, x );
    }

    @Override
    public void setSQLXML( int parameterIndex, SQLXML xmlObject ) throws SQLException {
        delegate.setSQLXML( parameterIndex, xmlObject );
    }

    @Override
    public void setString( int parameterIndex, String x ) throws SQLException {
        delegate.setString( parameterIndex, x );
    }

    @Override
    public void setTime( int parameterIndex, Time x, Calendar cal ) throws SQLException {
        delegate.setTime( parameterIndex, x, cal );
    }

    @Override
    public void setTime( int parameterIndex, Time x ) throws SQLException {
        delegate.setTime( parameterIndex, x );
    }

    @Override
    public void setTimestamp( int parameterIndex, Timestamp x, Calendar cal ) throws SQLException {
        delegate.setTimestamp( parameterIndex, x, cal );
    }

    @Override
    public void setTimestamp( int parameterIndex, Timestamp x ) throws SQLException {
        delegate.setTimestamp( parameterIndex, x );
    }

    @SuppressWarnings( "deprecation" )
    @Override
    public void setUnicodeStream( int parameterIndex, InputStream x, int length ) throws SQLException {
        delegate.setUnicodeStream( parameterIndex, x, length );
    }

    @Override
    public void setURL( int parameterIndex, URL x ) throws SQLException {
        delegate.setURL( parameterIndex, x );
    }

    @Override
    public <T> T unwrap( Class<T> iface ) throws SQLException {
        return delegate.unwrap( iface );
    }

}
