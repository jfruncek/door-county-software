<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd"


	default-autowire="byName">

	<!-- allow for property placeholders -->
	<bean id="environment"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"
		lazy-init="false">
		<property name="ignoreResourceNotFound" value="true" />
		<property name="locations">
			<list>
				<value>
					classpath:openreports.properties
        </value>
			</list>
		</property>
	</bean>


	<bean id="hibernateDataSource" destroy-method="close"
		class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="${hibernate.jdbc.driver}" />
		<property name="url" value="${hibernate.jdbc.url}" />
		<property name="username" value="${hibernate.jdbc.username}" />
		<property name="password" value="${hibernate.jdbc.password}" />
		<!-- <property name="maxIdle" value="${hibernate.jdbc.maxIdle}" /> <property 
			name="maxActive" value="${hibernate.jdbc.maxActive}" /> -->
	</bean>
	
	<!-- ${hibernate.jdbc.username} <bean id="hibernateDataSource" class="org.springframework.jndi.JndiObjectFactoryBean"> 
		<property name="jndiName" value="java:OpenReportsDS" /> </bean> -->

	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<property name="dataSource" ref="hibernateDataSource" />
		<property name="configLocation" value="classpath:/hibernate.cfg.xml" />
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.SQLServerDialect</prop>
				<prop key="hibernate.jdbc.batch_size">0</prop>
			</props>
		</property>
	</bean>

	<bean id="hibernateProvider" class="org.efs.openreports.providers.HibernateProvider">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<bean id="quartzDataSource" destroy-method="close"
		class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="${quartz.jdbc.driver}" />
		<property name="url" value="${quartz.jdbc.url}" />
		<property name="username" value="${quartz.jdbc.username}" />
		<property name="password" value="${quartz.jdbc.password}" />
		<property name="maxIdle" value="${quartz.jdbc.maxIdle}" />
		<property name="maxActive" value="${quartz.jdbc.maxActive}" />
	</bean>

	<!-- <bean id="quartzDataSource" class="org.springframework.jndi.JndiObjectFactoryBean"> 
		<property name="jndiName" value="java:OpenReportsDS" /> </bean> -->


	<!-- Note: the scheduler doesn't directly depend on the birtProvider. However, 
		the birtProvider singleton must be instantiated before birt reports can be 
		run and running reports is typically what the scheduler will be doing. -->
	<!--depends-on="birtProvider" -->
	<bean id="scheduler"
		class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="jobFactory" ref="jobFactory" />
		<property name="dataSource" ref="quartzDataSource" />
		<property name="applicationContextSchedulerContextKey" value="applicationContext" />
		<property name="quartzProperties">
			<props>
				<prop key="org.quartz.scheduler.instanceName">ReportScheduler</prop>
				<prop key="org.quartz.scheduler.instanceId">AUTO</prop>
				<prop key="org.quartz.threadPool.class">org.quartz.simpl.SimpleThreadPool</prop>
				<prop key="org.quartz.threadPool.threadCount">5</prop>
				<prop key="org.quartz.jobStore.class">org.quartz.impl.jdbcjobstore.JobStoreTX</prop>
				<prop key="org.quartz.jobStore.isClustered">false</prop>
				<prop key="org.quartz.jobStore.useProperties">false</prop>
				<prop key="org.quartz.jobStore.tablePrefix">QRTZ_</prop>
				<prop key="org.quartz.jobStore.driverDelegateClass">org.quartz.impl.jdbcjobstore.MSSQLDelegate</prop>
				<prop key="org.quartz.jobStore.selectWithLockSQL">SELECT * FROM {0}LOCKS WHERE LOCK_NAME = ? FOR UPDATE
				</prop>
			</props>
		</property>
	</bean>

	<bean id="jobFactory" class="org.efs.openreports.scheduler.SpringAwareJobFactory" />

	<bean id="reportRunCallbacks" class="java.util.ArrayList" scope="prototype">
		<constructor-arg>
			<list>
				<bean class="org.efs.openreports.scheduler.NotifyingReportRunCallback"
					scope="prototype">
					<property name="mailProvider" ref="mailProvider" />
					<property name="deliverySupport" ref="deliverySupport" />
					<property name="runStatusRegistry" ref="runStatusRegistry" />
				</bean>
			</list>
		</constructor-arg>
	</bean>


	<bean id="scheduledReportJob" class="org.efs.openreports.util.ScheduledReportJob"
		scope="prototype">
		<property name="reportRunCallbacks" ref="reportRunCallbacks" />
	</bean>

	<bean id="runStatusRegistry"
		class="org.efs.openreports.scheduler.notification.RunStatusRegistry">
	</bean>

	<bean id="runStatusNotificationSupport"
		class="org.efs.openreports.scheduler.notification.RunStatusNotificationSupport">
	</bean>


	<bean id="persistedPropertiesProvider"
		class="org.efs.openreports.providers.impl.PropertiesProviderImpl">
		<constructor-arg>
			<ref bean="hibernateProvider" />
		</constructor-arg>
	</bean>


	<bean id="propertiesProvider"
		class="org.efs.openreports.providers.impl.StarkPropertiesProvider">
		<constructor-arg>
			<ref bean="persistedPropertiesProvider" />
		</constructor-arg>
	</bean>

	<bean id="directoryProvider" class="org.efs.openreports.providers.DirectoryProvider">
		<constructor-arg>
			<ref bean="propertiesProvider" />
		</constructor-arg>
	</bean>

	<bean id="dateProvider" class="org.efs.openreports.providers.DateProvider">
		<constructor-arg>
			<ref bean="propertiesProvider" />
		</constructor-arg>
	</bean>

	<bean id="dataSourceProvider"
		class="org.efs.openreports.providers.impl.DataSourceProviderImpl">
		<constructor-arg>
			<ref bean="hibernateProvider" />
		</constructor-arg>
	</bean>

	<bean id="groupProvider" class="org.efs.openreports.providers.impl.GroupProviderImpl">
		<constructor-arg>
			<ref bean="hibernateProvider" />
		</constructor-arg>
	</bean>

	<bean id="bookProvider" class="org.efs.openreports.providers.impl.BookProviderImpl">
		<constructor-arg>
			<ref bean="hibernateProvider" />
		</constructor-arg>
	</bean>

	<bean id="parameterProvider"
		class="org.efs.openreports.providers.impl.ParameterProviderImpl">
		<constructor-arg>
			<ref bean="dataSourceProvider" />
		</constructor-arg>
		<constructor-arg>
			<ref bean="dateProvider" />
		</constructor-arg>
		<constructor-arg>
			<ref bean="hibernateProvider" />
		</constructor-arg>
	</bean>

	<bean id="reportLogProvider"
		class="org.efs.openreports.providers.impl.ReportLogProviderImpl">
		<constructor-arg>
			<ref bean="hibernateProvider" />
		</constructor-arg>
	</bean>

	<bean id="reportProvider" class="org.efs.openreports.providers.impl.ReportProviderImpl">
		<constructor-arg>
			<ref bean="directoryProvider" />
		</constructor-arg>
		<constructor-arg>
			<ref bean="hibernateProvider" />
		</constructor-arg>
		<constructor-arg>
			<ref bean="bookProvider" />
		</constructor-arg>
		<constructor-arg>
			<ref bean="schedulerProvider" />
		</constructor-arg>
		<constructor-arg>
			<ref bean="userProvider" />
		</constructor-arg>
	</bean>

	<bean id="userProvider" class="org.efs.openreports.providers.impl.UserProviderImpl">
		<constructor-arg>
			<ref bean="hibernateProvider" />
		</constructor-arg>
	</bean>

	<bean id="mailProvider" class="org.efs.openreports.providers.impl.MailProviderImpl">
		<constructor-arg>
			<ref bean="propertiesProvider" />
		</constructor-arg>
	</bean>

	<bean id="chartProvider" class="org.efs.openreports.providers.impl.ChartProviderImpl">
		<constructor-arg>
			<ref bean="hibernateProvider" />
		</constructor-arg>
	</bean>

	<bean id="tagProvider" class="org.efs.openreports.providers.impl.TagProviderImpl">
		<constructor-arg>
			<ref bean="hibernateProvider" />
		</constructor-arg>
	</bean>

	<bean id="servletContext"
		class="org.springframework.web.context.support.ServletContextFactoryBean" />

<!--  	<bean id="birtProvider" class="org.efs.openreports.providers.BirtProvider">
		<constructor-arg>
			<ref bean="servletContext" />
		</constructor-arg>
		<constructor-arg>
			<ref bean="directoryProvider" />
		</constructor-arg>
	</bean>
-->
	<bean id="schedulerProvider"
		class="org.efs.openreports.providers.impl.SchedulerProviderImpl">
		<constructor-arg>
			<ref bean="scheduler" />
		</constructor-arg>
	</bean>

	<bean id="alertProvider" class="org.efs.openreports.providers.impl.AlertProviderImpl">
		<constructor-arg>
			<ref bean="dataSourceProvider" />
		</constructor-arg>
		<constructor-arg>
			<ref bean="reportLogProvider" />
		</constructor-arg>
		<constructor-arg>
			<ref bean="hibernateProvider" />
		</constructor-arg>
	</bean>

	<bean id="searchResultsTableDecorator" class="org.efs.openreports.util.SearchResultsTableDecorator">
	</bean>

	<bean id="dateColumnDecorator" class="org.efs.openreports.util.DateColumnDecorator">
	</bean>

	<bean id="dateTimeColumnDecorator" class="org.efs.openreports.util.DateTimeColumnDecorator">
	</bean>

	<bean id="deliverySupport" class="org.efs.openreports.delivery.DeliverySupport">
		<constructor-arg>
			<ref bean="propertiesProvider" />
		</constructor-arg>
	</bean>

	<bean id="fileSystemDeliveryMethod" class="org.efs.openreports.delivery.FileSystemDeliveryMethod">
	</bean>

	<bean id="emailDeliveryMethod" class="org.efs.openreports.delivery.EMailDeliveryMethod">
	</bean>

	<bean id="lanDeliveryMethod" class="org.efs.openreports.delivery.LanDeliveryMethod">
	</bean>

	<bean id="printerDeliveryMethod" class="org.efs.openreports.delivery.CommandDeliveryMethod">
	</bean>

	<bean id="excelExportProvider"
		class="org.efs.openreports.providers.impl.POIExcelExportProvider">
	</bean>

	<bean id="csvExportProvider"
		class="org.efs.openreports.providers.impl.OpenCSVExportProvider">
	</bean>

	<bean id="xlsxExportProvider"
		class="org.efs.openreports.providers.impl.POIXlsxExportProvider">
	</bean>

	<bean id="chartReportEngine" class="org.efs.openreports.engine.ChartReportEngine"
		scope="prototype">
	</bean>

	<bean id="jxlsReportEngine" class="org.efs.openreports.engine.JXLSReportEngine"
		scope="prototype">
	</bean>

	<bean id="jfreeReportEngine" class="org.efs.openreports.engine.JFreeReportEngine"
		scope="prototype">
	</bean>

	<bean id="birtReportEngine" class="org.efs.openreports.engine.BirtReportEngine"
		scope="prototype">
	</bean>

	<bean id="jasperReportEngine" class="org.efs.openreports.engine.JasperReportEngine"
		scope="prototype">
	</bean>

	<bean id="queryReportEngine" class="org.efs.openreports.engine.QueryReportEngine"
		scope="prototype" lazy-init="true">
	</bean>

	<bean id="velocityReportEngine" class="org.efs.openreports.engine.VelocityReportEngine"
		scope="prototype">
	</bean>

	<bean id="eSpreadsheetReportEngine" class="org.efs.openreports.engine.ESpreadsheetReportEngine"
		scope="prototype">
	</bean>
	<bean id="reportProcessorReportEngine" class="org.efs.openreports.engine.ReportProcessorReportEngine"
		scope="prototype">
	</bean>

	<bean id="javaReportEngine" class="org.efs.openreports.engine.javareport.JavaReportEngine"
		scope="prototype">
	</bean>

	<bean id="reportEngineProvider" class="org.efs.openreports.engine.ReportEngineProvider">
	</bean>

	<bean id="batchReportProcessor" class="org.efs.openreports.engine.BatchReportProcessor">
	</bean>

	<bean id="cacheManager"
		class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
		<property name="configLocation" value="classpath:ehcacheNonHibernate.xml" />
	</bean>

	<bean id="queryResultsEhcache" class="org.springframework.cache.ehcache.EhCacheFactoryBean">
		<property name="cacheManager" ref="cacheManager" />
		<property name="cacheName" value="com.starkinvestments.cache.queryresults" />
	</bean>

	<bean id="queryResultsCache" class="org.efs.openreports.engine.querycache.QueryResultsCache">
	</bean>

	<bean id="queryResultsBuilder" class="org.efs.openreports.engine.QueryResultsBuilder">
	</bean>

	<bean id="queryResultsFlushTask"
		class="org.efs.openreports.engine.querycache.QueryResultsFlushTask">
		<property name="idleTimeInSeconds" value="60" />
	</bean>

	<bean id="runStatusMonitorTask"
		class="org.efs.openreports.scheduler.notification.RunStatusMonitorTask">
	</bean>

	<bean id="timerFactory" class="org.springframework.scheduling.timer.TimerFactoryBean">
		<property name="scheduledTimerTasks">
			<list>
				<bean class="org.springframework.scheduling.timer.ScheduledTimerTask">
					<property name="delay" value="10000" />
					<property name="period" value="60000" />
					<property name="timerTask" ref="queryResultsFlushTask" />
				</bean>

				<bean class="org.springframework.scheduling.timer.ScheduledTimerTask">
					<property name="delay" value="20000" />
					<property name="period" value="60000" />
					<property name="timerTask" ref="runStatusMonitorTask" />
				</bean>
			</list>
		</property>
	</bean>

	<bean id="reportExecutor"
		class="org.efs.openreports.concurrent.BlockingThreadPoolTaskExecutor">
		<property name="corePoolSize" value="10" />
		<property name="maxPoolSize" value="10" />
		<property name="queueCapacity" value="50" />
	</bean>

	<bean id="reportExecutionRunnable" class="org.efs.openreports.scheduler.ReportExecutionRunnable"
		scope="prototype">
	</bean>

	<!-- <bean id="org.efs.openreports.actions.LoginAction" class="org.efs.openreports.actions.LoginAction"> 
		<property name="userProvider" ref="userProvider" /> </bean> <bean id="org.efs.openreports.actions.admin.EditDataSourceAction" 
		class="org.efs.openreports.actions.admin.EditDataSourceAction"> <property 
		name="dataSourceProvider" ref="dataSourceProvider" /> </bean> -->
</beans>
