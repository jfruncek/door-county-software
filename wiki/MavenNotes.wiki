= Conventions =
  * Standard directory layout for projects
  * A single Maven project produces a single output
  * Standard naming conventions (such as {{{commons-logging-1.2.jar}}}

Maven's Super POM carries with it all the default conventions that Maven encourages, and is the analog of the Java language's java.lang.Object class.

= Dependencies ==

  * The dependencies contained within the {{{dependencyManagement}}} element are used only to state the preference for a version and by themselves do not affect a project's dependency graph, whereas the top-level {{{dependencies}}} element does. _This means that a dependency *must* be inherited or explicitly declared in the {{{dependencies}}} element. Also version is required in the {{{dependencyManagement}}} element but not in the {{{dependencies}}} element_
  * order of elements doesn't matter

= Plugins ==
  * everything accomplished in Maven is the result of a plugin executing
  * execution is coordinated by Maven's build life cycle in a declarative fashion
  * To change compiler settings, use
{{{
<plugin>
  <groupId>org.apache.maven.plugins</groupId>
  <artifactId>maven-compiler-plugin</artifactId>
  <version>2.0.2</version>
  <configuration>
    <source>6</source>
    <target>6</target>
  </configuration>
</plugin>
}}}
  * To ignore test results and continue the build
{{{
<plugin>
  <groupId>org.apache.maven.plugins</groupId>
  <artifactId>maven-surefire-plugin</artifactId>
  <configuration>
    <testFailureIgnore>true</testFailureIgnore>
  </configuration>
</plugin>
}}}
  
= Links =

[http://www.maestrodev.com/better-build-maven Better Builds with Maven]

[http://door-county-software.googlecode.com/files/maven-definitive-guide.pdf Maven- The Definitive Guide]

[http://www.sonatype.com/people/2009/04/how-to-convert-from-ant-to-maven-in-5-minutes/ Convert Ant to Maven]

[http://blog.springsource.com/2009/12/02/obtaining-spring-3-artifacts-with-maven/ Obtaining Spring 3 with Maven]

[http://repo1.maven.org/maven2/ Maven Central]

[http://maven.apache.org/ The Maven Project]

[http://maven.apache.org/guides/introduction/introduction-to-the-standard-directory-layout.html Maven Standard Directory layout]

[http://today.java.net/pub/a/today/2007/03/01/building-web-applications-with-maven-2.html Building Web Applications with Maven2]

= Interesting Maven commands =
|| *Command* || *Description* || *Link* ||
||{{{mvn -h}}}||Maven command line options|| ||
||{{{mvn help:describe -Dplugin=org.apache.maven.plugins:maven-jarsigner-plugin -Ddetail}}} || describes goals and parameters for a plugin || ||
||{{{mvn help:effective-pom}}}||Combines the project POM with the contents of all parent POMs, user settings, and any active profiles. This goal can come in handy if you are trying to debug a build and want to see how all of the current project's ancestor POMs are contributing to the effective POM. ||[http://maven.apache.org/pom.html#Inheritance Inheritance] ||
||{{{mvn help:evaluate}}}||interactively evaluate maven expressions, for example you can use this to display the value of a property || ||
||{{{mvn dependency:analyze}}}||finds undeclared dependencies and unused declared dependencies||[http://maven.apache.org/plugins/maven-dependency-plugin/usage.html Dependency Plugin] ||
||{{{mvn dependency:tree}}}|| displays dependencies in a tree || ||
||{{{mvn dependency:tree -Dverbose -Dincludes=commons-collections}}}||limits scope of above|| ||